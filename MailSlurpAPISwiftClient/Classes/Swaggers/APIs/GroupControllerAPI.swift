//
// GroupControllerAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class GroupControllerAPI {
    /**
     Add contacts to a group
     
     - parameter groupId: (path) groupId 
     - parameter updateGroupContactsOption: (body) updateGroupContactsOption 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addContactsToGroup(groupId: UUID, updateGroupContactsOption: UpdateGroupContacts, completion: @escaping ((_ data: GroupContactsDto?,_ error: Error?) -> Void)) {
        addContactsToGroupWithRequestBuilder(groupId: groupId, updateGroupContactsOption: updateGroupContactsOption).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Add contacts to a group
     - PUT /groups/{groupId}/contacts
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - examples: [{contentType=application/json, example={
  "contacts" : [ {
    "firstName" : "firstName",
    "lastName" : "lastName",
    "metaData" : {
      "integralNumber" : true,
      "double" : true,
      "valueNode" : true,
      "bigInteger" : true,
      "floatingPointNumber" : true,
      "float" : true,
      "nodeType" : "ARRAY",
      "int" : true,
      "long" : true,
      "textual" : true,
      "empty" : true,
      "missingNode" : true,
      "pojo" : true,
      "number" : true,
      "boolean" : true,
      "null" : true,
      "array" : true,
      "binary" : true,
      "containerNode" : true,
      "short" : true,
      "bigDecimal" : true,
      "object" : true
    },
    "optOut" : true,
    "emailAddresses" : [ "emailAddresses", "emailAddresses" ],
    "company" : "company",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "tags" : [ "tags", "tags" ]
  }, {
    "firstName" : "firstName",
    "lastName" : "lastName",
    "metaData" : {
      "integralNumber" : true,
      "double" : true,
      "valueNode" : true,
      "bigInteger" : true,
      "floatingPointNumber" : true,
      "float" : true,
      "nodeType" : "ARRAY",
      "int" : true,
      "long" : true,
      "textual" : true,
      "empty" : true,
      "missingNode" : true,
      "pojo" : true,
      "number" : true,
      "boolean" : true,
      "null" : true,
      "array" : true,
      "binary" : true,
      "containerNode" : true,
      "short" : true,
      "bigDecimal" : true,
      "object" : true
    },
    "optOut" : true,
    "emailAddresses" : [ "emailAddresses", "emailAddresses" ],
    "company" : "company",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "tags" : [ "tags", "tags" ]
  } ],
  "group" : {
    "createdAt" : "2000-01-23T04:56:07.000+00:00",
    "name" : "name",
    "description" : "description",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
  }
}}]
     
     - parameter groupId: (path) groupId 
     - parameter updateGroupContactsOption: (body) updateGroupContactsOption 

     - returns: RequestBuilder<GroupContactsDto> 
     */
    open class func addContactsToGroupWithRequestBuilder(groupId: UUID, updateGroupContactsOption: UpdateGroupContacts) -> RequestBuilder<GroupContactsDto> {
        var path = "/groups/{groupId}/contacts"
        let groupIdPreEscape = "\(groupId)"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateGroupContactsOption)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GroupContactsDto>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a group
     
     - parameter createGroupOptions: (body) createGroupOptions 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createGroup(createGroupOptions: CreateGroupOptions, completion: @escaping ((_ data: GroupDto?,_ error: Error?) -> Void)) {
        createGroupWithRequestBuilder(createGroupOptions: createGroupOptions).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a group
     - POST /groups
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - examples: [{contentType=application/json, example={
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
}}]
     
     - parameter createGroupOptions: (body) createGroupOptions 

     - returns: RequestBuilder<GroupDto> 
     */
    open class func createGroupWithRequestBuilder(createGroupOptions: CreateGroupOptions) -> RequestBuilder<GroupDto> {
        let path = "/groups"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createGroupOptions)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GroupDto>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete group
     
     - parameter groupId: (path) groupId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteGroup(groupId: UUID, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteGroupWithRequestBuilder(groupId: groupId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete group
     - DELETE /groups/{groupId}
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     
     - parameter groupId: (path) groupId 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteGroupWithRequestBuilder(groupId: UUID) -> RequestBuilder<Void> {
        var path = "/groups/{groupId}"
        let groupIdPreEscape = "\(groupId)"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getAllGroups: String { 
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     Get all Contact Groups in paginated format
     
     - parameter page: (query) Optional page index in inbox list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in inbox list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAllGroups(page: Int? = nil, size: Int? = nil, sort: Sort_getAllGroups? = nil, completion: @escaping ((_ data: PageGroupProjection?,_ error: Error?) -> Void)) {
        getAllGroupsWithRequestBuilder(page: page, size: size, sort: sort).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get all Contact Groups in paginated format
     - GET /groups/paginated
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - examples: [{contentType=application/json, example={
  "number" : 0,
  "last" : true,
  "numberOfElements" : 6,
  "size" : 1,
  "totalPages" : 5,
  "pageable" : {
    "paged" : true,
    "pageNumber" : 5,
    "offset" : 1,
    "pageSize" : 5,
    "unpaged" : true,
    "sort" : {
      "unsorted" : true,
      "sorted" : true,
      "empty" : true
    }
  },
  "sort" : {
    "unsorted" : true,
    "sorted" : true,
    "empty" : true
  },
  "content" : [ {
    "createdAt" : "2000-01-23T04:56:07.000+00:00",
    "name" : "name",
    "description" : "description",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
  }, {
    "createdAt" : "2000-01-23T04:56:07.000+00:00",
    "name" : "name",
    "description" : "description",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
  } ],
  "first" : true,
  "empty" : true,
  "totalElements" : 5
}}]
     
     - parameter page: (query) Optional page index in inbox list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in inbox list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to ASC)

     - returns: RequestBuilder<PageGroupProjection> 
     */
    open class func getAllGroupsWithRequestBuilder(page: Int? = nil, size: Int? = nil, sort: Sort_getAllGroups? = nil) -> RequestBuilder<PageGroupProjection> {
        let path = "/groups/paginated"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": page?.encodeToJSON(), 
            "size": size?.encodeToJSON(), 
            "sort": sort?.rawValue
        ])

        let requestBuilder: RequestBuilder<PageGroupProjection>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get group
     
     - parameter groupId: (path) groupId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGroup(groupId: UUID, completion: @escaping ((_ data: GroupDto?,_ error: Error?) -> Void)) {
        getGroupWithRequestBuilder(groupId: groupId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get group
     - GET /groups/{groupId}
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - examples: [{contentType=application/json, example={
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
}}]
     
     - parameter groupId: (path) groupId 

     - returns: RequestBuilder<GroupDto> 
     */
    open class func getGroupWithRequestBuilder(groupId: UUID) -> RequestBuilder<GroupDto> {
        var path = "/groups/{groupId}"
        let groupIdPreEscape = "\(groupId)"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GroupDto>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get group and contacts belonging to it
     
     - parameter groupId: (path) groupId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGroupWithContacts(groupId: UUID, completion: @escaping ((_ data: GroupContactsDto?,_ error: Error?) -> Void)) {
        getGroupWithContactsWithRequestBuilder(groupId: groupId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get group and contacts belonging to it
     - GET /groups/{groupId}/contacts
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - examples: [{contentType=application/json, example={
  "contacts" : [ {
    "firstName" : "firstName",
    "lastName" : "lastName",
    "metaData" : {
      "integralNumber" : true,
      "double" : true,
      "valueNode" : true,
      "bigInteger" : true,
      "floatingPointNumber" : true,
      "float" : true,
      "nodeType" : "ARRAY",
      "int" : true,
      "long" : true,
      "textual" : true,
      "empty" : true,
      "missingNode" : true,
      "pojo" : true,
      "number" : true,
      "boolean" : true,
      "null" : true,
      "array" : true,
      "binary" : true,
      "containerNode" : true,
      "short" : true,
      "bigDecimal" : true,
      "object" : true
    },
    "optOut" : true,
    "emailAddresses" : [ "emailAddresses", "emailAddresses" ],
    "company" : "company",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "tags" : [ "tags", "tags" ]
  }, {
    "firstName" : "firstName",
    "lastName" : "lastName",
    "metaData" : {
      "integralNumber" : true,
      "double" : true,
      "valueNode" : true,
      "bigInteger" : true,
      "floatingPointNumber" : true,
      "float" : true,
      "nodeType" : "ARRAY",
      "int" : true,
      "long" : true,
      "textual" : true,
      "empty" : true,
      "missingNode" : true,
      "pojo" : true,
      "number" : true,
      "boolean" : true,
      "null" : true,
      "array" : true,
      "binary" : true,
      "containerNode" : true,
      "short" : true,
      "bigDecimal" : true,
      "object" : true
    },
    "optOut" : true,
    "emailAddresses" : [ "emailAddresses", "emailAddresses" ],
    "company" : "company",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "tags" : [ "tags", "tags" ]
  } ],
  "group" : {
    "createdAt" : "2000-01-23T04:56:07.000+00:00",
    "name" : "name",
    "description" : "description",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
  }
}}]
     
     - parameter groupId: (path) groupId 

     - returns: RequestBuilder<GroupContactsDto> 
     */
    open class func getGroupWithContactsWithRequestBuilder(groupId: UUID) -> RequestBuilder<GroupContactsDto> {
        var path = "/groups/{groupId}/contacts"
        let groupIdPreEscape = "\(groupId)"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GroupContactsDto>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get all groups
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getGroups(completion: @escaping ((_ data: [GroupProjection]?,_ error: Error?) -> Void)) {
        getGroupsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get all groups
     - GET /groups
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - examples: [{contentType=application/json, example=[ {
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
}, {
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "name" : "name",
  "description" : "description",
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
} ]}]

     - returns: RequestBuilder<[GroupProjection]> 
     */
    open class func getGroupsWithRequestBuilder() -> RequestBuilder<[GroupProjection]> {
        let path = "/groups"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[GroupProjection]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Remove contacts from a group
     
     - parameter groupId: (path) groupId 
     - parameter updateGroupContactsOption: (body) updateGroupContactsOption 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func removeContactsFromGroup(groupId: UUID, updateGroupContactsOption: UpdateGroupContacts, completion: @escaping ((_ data: GroupContactsDto?,_ error: Error?) -> Void)) {
        removeContactsFromGroupWithRequestBuilder(groupId: groupId, updateGroupContactsOption: updateGroupContactsOption).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Remove contacts from a group
     - DELETE /groups/{groupId}/contacts
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - examples: [{contentType=application/json, example={
  "contacts" : [ {
    "firstName" : "firstName",
    "lastName" : "lastName",
    "metaData" : {
      "integralNumber" : true,
      "double" : true,
      "valueNode" : true,
      "bigInteger" : true,
      "floatingPointNumber" : true,
      "float" : true,
      "nodeType" : "ARRAY",
      "int" : true,
      "long" : true,
      "textual" : true,
      "empty" : true,
      "missingNode" : true,
      "pojo" : true,
      "number" : true,
      "boolean" : true,
      "null" : true,
      "array" : true,
      "binary" : true,
      "containerNode" : true,
      "short" : true,
      "bigDecimal" : true,
      "object" : true
    },
    "optOut" : true,
    "emailAddresses" : [ "emailAddresses", "emailAddresses" ],
    "company" : "company",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "tags" : [ "tags", "tags" ]
  }, {
    "firstName" : "firstName",
    "lastName" : "lastName",
    "metaData" : {
      "integralNumber" : true,
      "double" : true,
      "valueNode" : true,
      "bigInteger" : true,
      "floatingPointNumber" : true,
      "float" : true,
      "nodeType" : "ARRAY",
      "int" : true,
      "long" : true,
      "textual" : true,
      "empty" : true,
      "missingNode" : true,
      "pojo" : true,
      "number" : true,
      "boolean" : true,
      "null" : true,
      "array" : true,
      "binary" : true,
      "containerNode" : true,
      "short" : true,
      "bigDecimal" : true,
      "object" : true
    },
    "optOut" : true,
    "emailAddresses" : [ "emailAddresses", "emailAddresses" ],
    "company" : "company",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "tags" : [ "tags", "tags" ]
  } ],
  "group" : {
    "createdAt" : "2000-01-23T04:56:07.000+00:00",
    "name" : "name",
    "description" : "description",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
  }
}}]
     
     - parameter groupId: (path) groupId 
     - parameter updateGroupContactsOption: (body) updateGroupContactsOption 

     - returns: RequestBuilder<GroupContactsDto> 
     */
    open class func removeContactsFromGroupWithRequestBuilder(groupId: UUID, updateGroupContactsOption: UpdateGroupContacts) -> RequestBuilder<GroupContactsDto> {
        var path = "/groups/{groupId}/contacts"
        let groupIdPreEscape = "\(groupId)"
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateGroupContactsOption)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GroupContactsDto>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
