//
// ReceiveEmailsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class ReceiveEmailsAPI: APIBase {
    /**
     Bulk create Inboxes (email addresses)
     
     - parameter count: (query) Number of inboxes to be created in bulk 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func bulkCreateInboxesUsingPOST(count count: Int32, completion: ((data: [Inbox]?, error: ErrorType?) -> Void)) {
        bulkCreateInboxesUsingPOSTWithRequestBuilder(count: count).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Bulk create Inboxes (email addresses)
     - POST /bulk/inboxes
     - Enterprise Account Required
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - examples: [{contentType=application/json, example=[ {
  "emailAddress" : "emailAddress",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "userId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
}, {
  "emailAddress" : "emailAddress",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "userId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
} ]}]
     
     - parameter count: (query) Number of inboxes to be created in bulk 

     - returns: RequestBuilder<[Inbox]> 
     */
    public class func bulkCreateInboxesUsingPOSTWithRequestBuilder(count count: Int32) -> RequestBuilder<[Inbox]> {
        let path = "/bulk/inboxes"
        let URLString = MailSlurpAPISwiftClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "count": count.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[Inbox]>.Type = MailSlurpAPISwiftClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Create an Inbox (email address)
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createInboxUsingPOST(completion: ((data: Inbox?, error: ErrorType?) -> Void)) {
        createInboxUsingPOSTWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create an Inbox (email address)
     - POST /inboxes
     - Create a new inbox and ephemeral email address to send and receive from. This is a necessary step before sending or receiving emails. The response contains the inbox's ID and its associated email address. It is recommended that you create a new inbox during each test method so that it is unique and empty
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - examples: [{contentType=application/json, example={
  "emailAddress" : "emailAddress",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "userId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
}}]

     - returns: RequestBuilder<Inbox> 
     */
    public class func createInboxUsingPOSTWithRequestBuilder() -> RequestBuilder<Inbox> {
        let path = "/inboxes"
        let URLString = MailSlurpAPISwiftClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Inbox>.Type = MailSlurpAPISwiftClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get Email Analytics
     
     - parameter emailId: (path) emailId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getEmailAnalyticsUsingGET(emailId emailId: NSUUID, completion: ((data: EmailAnalytics?, error: ErrorType?) -> Void)) {
        getEmailAnalyticsUsingGETWithRequestBuilder(emailId: emailId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get Email Analytics
     - GET /emails/{emailId}/analytics
     - Returns a spam analysis on a given email
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - examples: [{contentType=application/json, example={
  "spamNegativityPercentage" : 0
}}]
     
     - parameter emailId: (path) emailId 

     - returns: RequestBuilder<EmailAnalytics> 
     */
    public class func getEmailAnalyticsUsingGETWithRequestBuilder(emailId emailId: NSUUID) -> RequestBuilder<EmailAnalytics> {
        var path = "/emails/{emailId}/analytics"
        path = path.stringByReplacingOccurrencesOfString("{emailId}", withString: "\(emailId)", options: .LiteralSearch, range: nil)
        let URLString = MailSlurpAPISwiftClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<EmailAnalytics>.Type = MailSlurpAPISwiftClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get Email Content
     
     - parameter emailId: (path) emailId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getEmailUsingGET(emailId emailId: NSUUID, completion: ((data: Email?, error: ErrorType?) -> Void)) {
        getEmailUsingGETWithRequestBuilder(emailId: emailId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get Email Content
     - GET /emails/{emailId}
     - Returns a email summary object with headers and content. To retrieve the raw unparsed email use the getRawMessage endpoint
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - examples: [{contentType=application/json, example={
  "cc" : [ "cc", "cc" ],
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "headers" : {
    "key" : "headers"
  },
  "bcc" : [ "bcc", "bcc" ],
  "subject" : "subject",
  "from" : "from",
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "to" : [ "to", "to" ],
  "body" : "body",
  "inboxId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "userId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "updatedAt" : "2000-01-23T04:56:07.000+00:00"
}}]
     
     - parameter emailId: (path) emailId 

     - returns: RequestBuilder<Email> 
     */
    public class func getEmailUsingGETWithRequestBuilder(emailId emailId: NSUUID) -> RequestBuilder<Email> {
        var path = "/emails/{emailId}"
        path = path.stringByReplacingOccurrencesOfString("{emailId}", withString: "\(emailId)", options: .LiteralSearch, range: nil)
        let URLString = MailSlurpAPISwiftClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Email>.Type = MailSlurpAPISwiftClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     List an Inbox's Emails
     
     - parameter inboxId: (path) Id of inbox that emails belongs to 
     - parameter limit: (query) Limit the result set, ordered by descending received date time (optional)
     - parameter minCount: (query) Minimum acceptable email count. Will cause request to hang (and retry) until minCount is satisfied or retryTimeout is reached. (optional)
     - parameter retryTimeout: (query) Maximum milliseconds to spend retrying inbox database until minCount emails are returned (optional)
     - parameter since: (query) Exclude emails received before this ISO 8601 date time (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getEmailsUsingGET(inboxId inboxId: NSUUID, limit: Int32? = nil, minCount: Int64? = nil, retryTimeout: Int64? = nil, since: NSDate? = nil, completion: ((data: [EmailPreview]?, error: ErrorType?) -> Void)) {
        getEmailsUsingGETWithRequestBuilder(inboxId: inboxId, limit: limit, minCount: minCount, retryTimeout: retryTimeout, since: since).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List an Inbox's Emails
     - GET /inboxes/{inboxId}/emails
     - List emails that an inbox has received. Only emails that are sent to the inbox's email address will appear in the inbox. It may take several seconds for any email you send to an inbox's email address to appear in the inbox. To make this endpoint wait for a minimum number of emails use the `minCount` parameter. The server will retry the inbox database until the `minCount` is satisfied or the `retryTimeout` is reached
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - examples: [{contentType=application/json, example=[ {
  "created" : "2000-01-23T04:56:07.000+00:00",
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
}, {
  "created" : "2000-01-23T04:56:07.000+00:00",
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
} ]}]
     
     - parameter inboxId: (path) Id of inbox that emails belongs to 
     - parameter limit: (query) Limit the result set, ordered by descending received date time (optional)
     - parameter minCount: (query) Minimum acceptable email count. Will cause request to hang (and retry) until minCount is satisfied or retryTimeout is reached. (optional)
     - parameter retryTimeout: (query) Maximum milliseconds to spend retrying inbox database until minCount emails are returned (optional)
     - parameter since: (query) Exclude emails received before this ISO 8601 date time (optional)

     - returns: RequestBuilder<[EmailPreview]> 
     */
    public class func getEmailsUsingGETWithRequestBuilder(inboxId inboxId: NSUUID, limit: Int32? = nil, minCount: Int64? = nil, retryTimeout: Int64? = nil, since: NSDate? = nil) -> RequestBuilder<[EmailPreview]> {
        var path = "/inboxes/{inboxId}/emails"
        path = path.stringByReplacingOccurrencesOfString("{inboxId}", withString: "\(inboxId)", options: .LiteralSearch, range: nil)
        let URLString = MailSlurpAPISwiftClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "limit": limit?.encodeToJSON(),
            "minCount": minCount?.encodeToJSON(),
            "retryTimeout": retryTimeout?.encodeToJSON(),
            "since": since?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[EmailPreview]>.Type = MailSlurpAPISwiftClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get Raw Email Content
     
     - parameter emailId: (path) emailId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getRawEmailUsingGET(emailId emailId: NSUUID, completion: ((data: String?, error: ErrorType?) -> Void)) {
        getRawEmailUsingGETWithRequestBuilder(emailId: emailId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get Raw Email Content
     - GET /emails/{emailId}/raw
     - Returns a raw, unparsed and unprocessed email
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - examples: [{contentType=application/json, example=""}]
     
     - parameter emailId: (path) emailId 

     - returns: RequestBuilder<String> 
     */
    public class func getRawEmailUsingGETWithRequestBuilder(emailId emailId: NSUUID) -> RequestBuilder<String> {
        var path = "/emails/{emailId}/raw"
        path = path.stringByReplacingOccurrencesOfString("{emailId}", withString: "\(emailId)", options: .LiteralSearch, range: nil)
        let URLString = MailSlurpAPISwiftClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = MailSlurpAPISwiftClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
