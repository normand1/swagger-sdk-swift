//
// ContactControllerAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class ContactControllerAPI {
    /**
     Create a contact
     
     - parameter createContactOptions: (body) createContactOptions 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createContact(createContactOptions: CreateContactOptions, completion: @escaping ((_ data: ContactDto?,_ error: Error?) -> Void)) {
        createContactWithRequestBuilder(createContactOptions: createContactOptions).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a contact
     - POST /contacts
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - examples: [{contentType=application/json, example={
  "firstName" : "firstName",
  "lastName" : "lastName",
  "metaData" : {
    "integralNumber" : true,
    "double" : true,
    "valueNode" : true,
    "bigInteger" : true,
    "floatingPointNumber" : true,
    "float" : true,
    "nodeType" : "ARRAY",
    "int" : true,
    "long" : true,
    "textual" : true,
    "empty" : true,
    "missingNode" : true,
    "pojo" : true,
    "number" : true,
    "boolean" : true,
    "null" : true,
    "array" : true,
    "binary" : true,
    "containerNode" : true,
    "short" : true,
    "bigDecimal" : true,
    "object" : true
  },
  "optOut" : true,
  "emailAddresses" : [ "emailAddresses", "emailAddresses" ],
  "company" : "company",
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "tags" : [ "tags", "tags" ]
}}]
     
     - parameter createContactOptions: (body) createContactOptions 

     - returns: RequestBuilder<ContactDto> 
     */
    open class func createContactWithRequestBuilder(createContactOptions: CreateContactOptions) -> RequestBuilder<ContactDto> {
        let path = "/contacts"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createContactOptions)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ContactDto>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete contact
     
     - parameter contactId: (path) contactId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteContact(contactId: UUID, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteContactWithRequestBuilder(contactId: contactId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete contact
     - DELETE /contacts/{contactId}
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     
     - parameter contactId: (path) contactId 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteContactWithRequestBuilder(contactId: UUID) -> RequestBuilder<Void> {
        var path = "/contacts/{contactId}"
        let contactIdPreEscape = "\(contactId)"
        let contactIdPostEscape = contactIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contactId}", with: contactIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getAllContacts: String { 
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     Get all contacts
     
     - parameter page: (query) Optional page index in inbox list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in inbox list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to ASC)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAllContacts(page: Int? = nil, size: Int? = nil, sort: Sort_getAllContacts? = nil, completion: @escaping ((_ data: PageContactProjection?,_ error: Error?) -> Void)) {
        getAllContactsWithRequestBuilder(page: page, size: size, sort: sort).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get all contacts
     - GET /contacts/paginated
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - examples: [{contentType=application/json, example={
  "number" : 0,
  "last" : true,
  "numberOfElements" : 6,
  "size" : 1,
  "totalPages" : 5,
  "pageable" : {
    "paged" : true,
    "pageNumber" : 5,
    "offset" : 1,
    "pageSize" : 5,
    "unpaged" : true,
    "sort" : {
      "unsorted" : true,
      "sorted" : true,
      "empty" : true
    }
  },
  "sort" : {
    "unsorted" : true,
    "sorted" : true,
    "empty" : true
  },
  "content" : [ {
    "createdAt" : "2000-01-23T04:56:07.000+00:00",
    "firstName" : "firstName",
    "lastName" : "lastName",
    "optOut" : true,
    "company" : "company",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
  }, {
    "createdAt" : "2000-01-23T04:56:07.000+00:00",
    "firstName" : "firstName",
    "lastName" : "lastName",
    "optOut" : true,
    "company" : "company",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
  } ],
  "first" : true,
  "empty" : true,
  "totalElements" : 5
}}]
     
     - parameter page: (query) Optional page index in inbox list pagination (optional, default to 0)
     - parameter size: (query) Optional page size in inbox list pagination (optional, default to 20)
     - parameter sort: (query) Optional createdAt sort direction ASC or DESC (optional, default to ASC)

     - returns: RequestBuilder<PageContactProjection> 
     */
    open class func getAllContactsWithRequestBuilder(page: Int? = nil, size: Int? = nil, sort: Sort_getAllContacts? = nil) -> RequestBuilder<PageContactProjection> {
        let path = "/contacts/paginated"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": page?.encodeToJSON(), 
            "size": size?.encodeToJSON(), 
            "sort": sort?.rawValue
        ])

        let requestBuilder: RequestBuilder<PageContactProjection>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get contact
     
     - parameter contactId: (path) contactId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getContact(contactId: UUID, completion: @escaping ((_ data: ContactDto?,_ error: Error?) -> Void)) {
        getContactWithRequestBuilder(contactId: contactId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get contact
     - GET /contacts/{contactId}
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - examples: [{contentType=application/json, example={
  "firstName" : "firstName",
  "lastName" : "lastName",
  "metaData" : {
    "integralNumber" : true,
    "double" : true,
    "valueNode" : true,
    "bigInteger" : true,
    "floatingPointNumber" : true,
    "float" : true,
    "nodeType" : "ARRAY",
    "int" : true,
    "long" : true,
    "textual" : true,
    "empty" : true,
    "missingNode" : true,
    "pojo" : true,
    "number" : true,
    "boolean" : true,
    "null" : true,
    "array" : true,
    "binary" : true,
    "containerNode" : true,
    "short" : true,
    "bigDecimal" : true,
    "object" : true
  },
  "optOut" : true,
  "emailAddresses" : [ "emailAddresses", "emailAddresses" ],
  "company" : "company",
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "tags" : [ "tags", "tags" ]
}}]
     
     - parameter contactId: (path) contactId 

     - returns: RequestBuilder<ContactDto> 
     */
    open class func getContactWithRequestBuilder(contactId: UUID) -> RequestBuilder<ContactDto> {
        var path = "/contacts/{contactId}"
        let contactIdPreEscape = "\(contactId)"
        let contactIdPostEscape = contactIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contactId}", with: contactIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ContactDto>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get all contacts
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getContacts(completion: @escaping ((_ data: [ContactProjection]?,_ error: Error?) -> Void)) {
        getContactsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get all contacts
     - GET /contacts
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - examples: [{contentType=application/json, example=[ {
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "firstName" : "firstName",
  "lastName" : "lastName",
  "optOut" : true,
  "company" : "company",
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
}, {
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "firstName" : "firstName",
  "lastName" : "lastName",
  "optOut" : true,
  "company" : "company",
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
} ]}]

     - returns: RequestBuilder<[ContactProjection]> 
     */
    open class func getContactsWithRequestBuilder() -> RequestBuilder<[ContactProjection]> {
        let path = "/contacts"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[ContactProjection]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
