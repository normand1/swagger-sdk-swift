//
// AttachmentControllerAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class AttachmentControllerAPI {
    /**
     Upload an attachment for sending
     
     - parameter uploadOptions: (body) uploadOptions 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func uploadAttachment(uploadOptions: UploadAttachmentOptions, completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        uploadAttachmentWithRequestBuilder(uploadOptions: uploadOptions).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Upload an attachment for sending
     - POST /attachments
     - When sending emails with attachments first upload each attachment with this endpoint. Record the returned attachment IDs. Then use these attachment IDs in the SendEmailOptions when sending an email. This means that attachments can easily be reused.
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - examples: [{contentType=application/json, example=[ "", "" ]}]
     
     - parameter uploadOptions: (body) uploadOptions 

     - returns: RequestBuilder<[String]> 
     */
    open class func uploadAttachmentWithRequestBuilder(uploadOptions: UploadAttachmentOptions) -> RequestBuilder<[String]> {
        let path = "/attachments"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: uploadOptions)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[String]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Upload an attachment for sending using Multipart Form
     
     - parameter file: (form) file 
     - parameter contentType: (query) contentType (optional)
     - parameter contentTypeHeader: (body) contentTypeHeader (optional)
     - parameter filename: (query) filename (optional)
     - parameter xFilename: (query) x-filename (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func uploadMultipartForm(file: URL, contentType: String? = nil, contentTypeHeader: String? = nil, filename: String? = nil, xFilename: String? = nil, completion: @escaping ((_ data: [String]?,_ error: Error?) -> Void)) {
        uploadMultipartFormWithRequestBuilder(file: file, contentType: contentType, contentTypeHeader: contentTypeHeader, filename: filename, xFilename: xFilename).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Upload an attachment for sending using Multipart Form
     - POST /attachments/multipart
     - When sending emails with attachments first upload each attachment with this endpoint. Record the returned attachment IDs. Then use these attachment IDs in the SendEmailOptions when sending an email. This means that attachments can easily be reused.
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - examples: [{contentType=application/json, example=[ "", "" ]}]
     
     - parameter file: (form) file 
     - parameter contentType: (query) contentType (optional)
     - parameter contentTypeHeader: (body) contentTypeHeader (optional)
     - parameter filename: (query) filename (optional)
     - parameter xFilename: (query) x-filename (optional)

     - returns: RequestBuilder<[String]> 
     */
    open class func uploadMultipartFormWithRequestBuilder(file: URL, contentType: String? = nil, contentTypeHeader: String? = nil, filename: String? = nil, xFilename: String? = nil) -> RequestBuilder<[String]> {
        let path = "/attachments/multipart"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: contentTypeHeader)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "contentType": contentType, 
            "filename": filename, 
            "x-filename": xFilename
        ])

        let requestBuilder: RequestBuilder<[String]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
