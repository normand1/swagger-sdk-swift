//
// CommonActionsControllerAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class CommonActionsControllerAPI {
    /**
     Create new random inbox
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createNewEmailAddress(completion: @escaping ((_ data: Inbox?,_ error: Error?) -> Void)) {
        createNewEmailAddressWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create new random inbox
     - POST /createInbox
     - Returns an Inbox with an `id` and an `emailAddress`
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - examples: [{contentType=application/json, example={
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "emailAddress" : "emailAddress",
  "name" : "name",
  "description" : "description",
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "favourite" : true,
  "userId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "expiresAt" : "expiresAt",
  "tags" : [ "tags", "tags" ]
}}]

     - returns: RequestBuilder<Inbox> 
     */
    open class func createNewEmailAddressWithRequestBuilder() -> RequestBuilder<Inbox> {
        let path = "/createInbox"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Inbox>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create new random inbox
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createNewEmailAddress1(completion: @escaping ((_ data: Inbox?,_ error: Error?) -> Void)) {
        createNewEmailAddress1WithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create new random inbox
     - POST /newEmailAddress
     - Returns an Inbox with an `id` and an `emailAddress`
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - examples: [{contentType=application/json, example={
  "createdAt" : "2000-01-23T04:56:07.000+00:00",
  "emailAddress" : "emailAddress",
  "name" : "name",
  "description" : "description",
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "favourite" : true,
  "userId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "expiresAt" : "expiresAt",
  "tags" : [ "tags", "tags" ]
}}]

     - returns: RequestBuilder<Inbox> 
     */
    open class func createNewEmailAddress1WithRequestBuilder() -> RequestBuilder<Inbox> {
        let path = "/newEmailAddress"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Inbox>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete all emails in an inbox
     
     - parameter inboxId: (query) inboxId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func emptyInbox(inboxId: UUID, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        emptyInboxWithRequestBuilder(inboxId: inboxId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete all emails in an inbox
     - DELETE /emptyInbox
     - Deletes all emails
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     
     - parameter inboxId: (query) inboxId 

     - returns: RequestBuilder<Void> 
     */
    open class func emptyInboxWithRequestBuilder(inboxId: UUID) -> RequestBuilder<Void> {
        let path = "/emptyInbox"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "inboxId": inboxId
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Send an email
     
     - parameter emailOptions: (body) emailOptions 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sendEmailSimple(emailOptions: SimpleSendEmailOptions, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        sendEmailSimpleWithRequestBuilder(emailOptions: emailOptions).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Send an email
     - POST /sendEmail
     - If no senderId or inboxId provided a random email address will be used to send from.
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     
     - parameter emailOptions: (body) emailOptions 

     - returns: RequestBuilder<Void> 
     */
    open class func sendEmailSimpleWithRequestBuilder(emailOptions: SimpleSendEmailOptions) -> RequestBuilder<Void> {
        let path = "/sendEmail"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: emailOptions)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
