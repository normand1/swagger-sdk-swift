//
// InboxControllerAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class InboxControllerAPI: APIBase {
    /**
     Create an Inbox (email address)
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createInboxUsingPOST(completion: ((data: Inbox?, error: ErrorType?) -> Void)) {
        createInboxUsingPOSTWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create an Inbox (email address)
     - POST /inboxes
     - Create a new inbox and ephemeral email address to send and receive from. This is a necessary step before sending or receiving emails. The response contains the inbox's ID and its associated email address. It is recommended that you create a new inbox during each test method so that it is unique and empty
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - examples: [{contentType=application/json, example={
  "emailAddress" : "emailAddress",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "userId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
}}]

     - returns: RequestBuilder<Inbox> 
     */
    public class func createInboxUsingPOSTWithRequestBuilder() -> RequestBuilder<Inbox> {
        let path = "/inboxes"
        let URLString = MailSlurpAPISwiftClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Inbox>.Type = MailSlurpAPISwiftClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete Inbox
     
     - parameter inboxId: (path) inboxId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteInboxUsingDELETE(inboxId inboxId: NSUUID, completion: ((error: ErrorType?) -> Void)) {
        deleteInboxUsingDELETEWithRequestBuilder(inboxId: inboxId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete Inbox
     - DELETE /inboxes/{inboxId}
     - Permanently delete an inbox and associated email address
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     
     - parameter inboxId: (path) inboxId 

     - returns: RequestBuilder<Void> 
     */
    public class func deleteInboxUsingDELETEWithRequestBuilder(inboxId inboxId: NSUUID) -> RequestBuilder<Void> {
        var path = "/inboxes/{inboxId}"
        path = path.stringByReplacingOccurrencesOfString("{inboxId}", withString: "\(inboxId)", options: .LiteralSearch, range: nil)
        let URLString = MailSlurpAPISwiftClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = MailSlurpAPISwiftClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     List an Inbox's Emails
     
     - parameter inboxId: (path) Id of inbox that emails belongs to 
     - parameter limit: (query) Limit the result set, ordered by descending received date time (optional)
     - parameter minCount: (query) Minimum acceptable email count. Will cause request to hang (and retry) until minCount is satisfied or retryTimeout is reached. (optional)
     - parameter retryTimeout: (query) Maximum milliseconds to spend retrying inbox database until minCount emails are returned (optional)
     - parameter since: (query) Exclude emails received before this ISO 8601 date time (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getEmailsUsingGET(inboxId inboxId: NSUUID, limit: Int32? = nil, minCount: Int64? = nil, retryTimeout: Int64? = nil, since: NSDate? = nil, completion: ((data: [EmailPreview]?, error: ErrorType?) -> Void)) {
        getEmailsUsingGETWithRequestBuilder(inboxId: inboxId, limit: limit, minCount: minCount, retryTimeout: retryTimeout, since: since).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List an Inbox's Emails
     - GET /inboxes/{inboxId}/emails
     - List emails that an inbox has received. Only emails that are sent to the inbox's email address will appear in the inbox. It may take several seconds for any email you send to an inbox's email address to appear in the inbox. To make this endpoint wait for a minimum number of emails use the `minCount` parameter. The server will retry the inbox database until the `minCount` is satisfied or the `retryTimeout` is reached
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - examples: [{contentType=application/json, example=[ {
  "created" : "2000-01-23T04:56:07.000+00:00",
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
}, {
  "created" : "2000-01-23T04:56:07.000+00:00",
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
} ]}]
     
     - parameter inboxId: (path) Id of inbox that emails belongs to 
     - parameter limit: (query) Limit the result set, ordered by descending received date time (optional)
     - parameter minCount: (query) Minimum acceptable email count. Will cause request to hang (and retry) until minCount is satisfied or retryTimeout is reached. (optional)
     - parameter retryTimeout: (query) Maximum milliseconds to spend retrying inbox database until minCount emails are returned (optional)
     - parameter since: (query) Exclude emails received before this ISO 8601 date time (optional)

     - returns: RequestBuilder<[EmailPreview]> 
     */
    public class func getEmailsUsingGETWithRequestBuilder(inboxId inboxId: NSUUID, limit: Int32? = nil, minCount: Int64? = nil, retryTimeout: Int64? = nil, since: NSDate? = nil) -> RequestBuilder<[EmailPreview]> {
        var path = "/inboxes/{inboxId}/emails"
        path = path.stringByReplacingOccurrencesOfString("{inboxId}", withString: "\(inboxId)", options: .LiteralSearch, range: nil)
        let URLString = MailSlurpAPISwiftClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "limit": limit?.encodeToJSON(),
            "minCount": minCount?.encodeToJSON(),
            "retryTimeout": retryTimeout?.encodeToJSON(),
            "since": since?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[EmailPreview]>.Type = MailSlurpAPISwiftClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get Inbox
     
     - parameter inboxId: (path) inboxId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getInboxUsingGET(inboxId inboxId: NSUUID, completion: ((data: Inbox?, error: ErrorType?) -> Void)) {
        getInboxUsingGETWithRequestBuilder(inboxId: inboxId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get Inbox
     - GET /inboxes/{inboxId}
     - Returns an inbox's properties, including its email address and ID
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - examples: [{contentType=application/json, example={
  "emailAddress" : "emailAddress",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "userId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
}}]
     
     - parameter inboxId: (path) inboxId 

     - returns: RequestBuilder<Inbox> 
     */
    public class func getInboxUsingGETWithRequestBuilder(inboxId inboxId: NSUUID) -> RequestBuilder<Inbox> {
        var path = "/inboxes/{inboxId}"
        path = path.stringByReplacingOccurrencesOfString("{inboxId}", withString: "\(inboxId)", options: .LiteralSearch, range: nil)
        let URLString = MailSlurpAPISwiftClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Inbox>.Type = MailSlurpAPISwiftClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     List Inboxes
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getInboxesUsingGET(completion: ((data: [Inbox]?, error: ErrorType?) -> Void)) {
        getInboxesUsingGETWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List Inboxes
     - GET /inboxes
     - List the inboxes you have created
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     - examples: [{contentType=application/json, example=[ {
  "emailAddress" : "emailAddress",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "userId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
}, {
  "emailAddress" : "emailAddress",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "userId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
} ]}]

     - returns: RequestBuilder<[Inbox]> 
     */
    public class func getInboxesUsingGETWithRequestBuilder() -> RequestBuilder<[Inbox]> {
        let path = "/inboxes"
        let URLString = MailSlurpAPISwiftClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[Inbox]>.Type = MailSlurpAPISwiftClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Send Email
     
     - parameter inboxId: (path) inboxId 
     - parameter sendEmailOptions: (body) sendEmailOptions 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func sendEmailUsingPOST(inboxId inboxId: NSUUID, sendEmailOptions: SendEmailOptions, completion: ((error: ErrorType?) -> Void)) {
        sendEmailUsingPOSTWithRequestBuilder(inboxId: inboxId, sendEmailOptions: sendEmailOptions).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Send Email
     - POST /inboxes/{inboxId}
     - Send an email from the inbox's email address. Specify the email recipients and contents in the request body. See the `SendEmailOptions` for more information. Note the `inboxId` refers to the inbox's id NOT its email address
     - API Key:
       - type: apiKey x-api-key 
       - name: API_KEY
     
     - parameter inboxId: (path) inboxId 
     - parameter sendEmailOptions: (body) sendEmailOptions 

     - returns: RequestBuilder<Void> 
     */
    public class func sendEmailUsingPOSTWithRequestBuilder(inboxId inboxId: NSUUID, sendEmailOptions: SendEmailOptions) -> RequestBuilder<Void> {
        var path = "/inboxes/{inboxId}"
        path = path.stringByReplacingOccurrencesOfString("{inboxId}", withString: "\(inboxId)", options: .LiteralSearch, range: nil)
        let URLString = MailSlurpAPISwiftClientAPI.basePath + path
        let parameters = sendEmailOptions.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = MailSlurpAPISwiftClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
